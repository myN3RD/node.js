Re presentational S tate T ransfer

- we transfer DATA instead of User Interfaces from someone elses server to our server
- a different kind of response is needed
- we dont call  render  like  res.render, cause APIs not render views -> they don return html files. And a rendered view is an html file 

4 Points we have to think about:
  • Endpoints
  • Paths
  • Parameters
  • Authentification

!- only the response and request data changes. NOT the general server-side logic!


DATA FORMATS we can exchange

HTML, Plain Text, XML, JSON
                         ↑
                       WINNER if we just want to transfer Data
                       
                       
                       
                       Routing
  C                                                S   
  L           → → → → → → | POST /post         |   E
  I           → → → → → → | GET /posts         |   R     Server-side Logic,
  E           → → → → → → | GET /posts/:postId |   V     Database Access etc.
  N                       |                    |   E
  T                       |                    |   R
                          |                    |
                          |  "API Endpoints"   |
                          |____________________| 
                           
        HTTP Methods
   
  GET (request) to get a resource or data from the server
      the response is giving us the resoure or data back to the client.
      
  POST (request) Post a resource from the client to the server -> Thats what we use actually everytime
 
  
  
  
        REST Principles
  
Uniform Interface                   Stateless Interaction

Clearly defined API Endpoints                 Topic: Authentication 
will clearly difined request +      Server and Client dont store any connection history
response data structure             , every request is handled seperately
  

