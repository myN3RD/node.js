    APIs  (Webserver) Application Programming Interface
    _________________
          
REST      |       GraphQL..

Types of Requests that the Backend allows -> calls API

RE-presentational S-tate T-ransfer

REST is a "architectural Style" for designing APIs, like different buildings,
which has different architectural styles.

other API Styles are:

GraphQL
FALCOR
etc.

- the Goldstandard for Web APIs is REST!


- POSTMAN is the way to go for testing APIs
  (we dont need a frontend when using POSTMAN!)



            SIMPLE API
            __________

const fs = require("fs");   // fs or http is also actually an API
const http = require("http");
const url = require("url");


NOTE:

we use it as top level code, this will now be read just ONES when the application is starting, 
YES its SYNCHRONOUS and will block the code - but its the better solutions,
as it would be below in the code block and read everytime again, if a user refreshes (requested) the url

TOP LEVEL CODE: (will be read just ones)

const data = fs.readFileSync(`${__dirname}/dev-data/data.json`, "utf-8");
const dataObject = JSON.parse(data);


// CALLBACK FUNCTION // this is what will be executed each time there is a new request
const server = http.createServer((req, res) => {
  const pathName = req.url;

  if (pathName === "/" || pathName === "/1234") {
    res.end("This is the 1234 URL");
  } else if (pathName === "/differentURL") {
    res.end("This is a different URL");
  } else if (pathName === "/api") {
    res.writeHead(200, { "Content-type": "application/json" });
    res.end(data);
  } else {
    res.writeHead("404"); // OPTIONAL to write the statuscode
    res.end("Page not found");
  }
});

server.listen(8000, () => {
  console.log("Server is listening on request on port 8000");
});




            FAKE REST API for development
            _____________________________

https://jsonplaceholder.typicode.com/


          HOW TO ***FETCH*** JSON DATA IN JS:
          ___________________________________
    
<script>
  fetch('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_day.geojson')
    .then(res => {
      return res.json();
    })
    .then(data => {
      console.log(data);
      console.log(data.features);
    })
    .catch(err => console.log(err));
</script>


- we transfer DATA instead of User Interfaces from someone elses server to our server
- a different kind of response is needed
- we dont call  render  like  res.render, cause APIs not render views -> they dont return html files. 
  And a rendered view is an html file 


4 Points we have to think about:
  • Endpoints
  • Paths
  • Parameters
  • Authentification

!- only the response and request data changes. NOT the general server-side logic!




DATA FORMATS we can exchange
____________________________

HTML, Plain Text, XML, JSON
                         ↑
                       WINNER if we just want to transfer Data
                              for request and responses!
                       
                       
                       
                       Routing
  C                                                S   
  L           → → → → → → | POST /post         |   E
  I           → → → → → → | GET /posts         |   R     Server-side Logic,
  E           → → → → → → | GET /posts/:postId |   V     Database Access etc.
  N                       |                    |   E
  T                       |                    |   R
                          |                    |
                          |  "API Endpoints"   |
                          |____________________| 
                           
                           
                           
            HTTP Methods (Verbs)
            ____________________
            
   
  GET (request) to get / (read) a resource or data FROM the SERVER -> BACK to the CLIENT.
      
  POST (request) to post / (create) a resource FROM the CLIENT -> BACK to the SERVER -> (Thats what we use actually everytime??)
  
  PUT (request) is updating data in the database -> the ENTIRE ENTRY with the sepific element inside will be replaced  { user: , email: password: }
  
  PATCH is updating data in the database -> a SINGLE/SPECIFIC ELEMENT inside the ENTRY will be replaced  { user: , email: password: } -> just the email 
  
  DELETE 


-> That CRUD operations!



"request response cycle" -> we have always to send back something!

like this:
app.post('/api/v1/tours', (req,res) => {
console.log(req.body);
res.send('Done');
});




          ENDPOINTS
          _________

Naming:

www.xxx.de/ENDPOINT use endpoint name     
             ⬇️          ⬇️      
          /getTour ---> GET  /tours/7 ⬅️ Tour id or name whatever
                                ⬆️
                            ALWAYS PLURAL

 
  
    
             REST Principles
             _______________
             
  
Uniform Interface                   Stateless Interaction

Clearly defined API Endpoints                 Topic: Authentication 
will clearly difined request +      Server and Client dont store any connection history
response data structure             , every request is handled seperately
  
  


REST API METHODS examples:
  
  
// fetching all articles
app.get('/articles', function(req, res) {
    Article.find(function(err, foundArticles) {
        if (!err) {
            console.log(foundArticles);
            res.send(foundArticles);
        } else {
            console.log(err);
            res.send(err);
        };
    });
});


// we have to use POSTMAN when we have NO frontend, to post something to the db!!!
app.post('/articles', function(req, res) {
    // console.log(req.body.title);     // for testing console.log
    // console.log(req.body.content);

    const newArticle = new Article({
        title: req.body.title,
        content: req.body.content
    });
    newArticle.save(function(err, foundArticles) {
        if (!err) {
            console.log('Successfully POST request');
            res.send('Successfully POST request');
        } else {
            console.log(err);
            res.send(err);
        };
    });
});


// delete ALL
app.delete('/articles', function(req, res) {
    Article.deleteMany(function(err) {
        if (!err) {
            res.send('Deleted all Articles');
        } else {
            res.send(err);
        };
    });
});


// get a specific article
app.get('/articles/:articleTitle', function(req, res) {

    Article.findOne({title: req.params.articleTitle}, function(err, foundArticle){
        if (foundArticle) {
            res.send(foundArticle);
        } else {
            res.send('No such Title found');
        }
    });
});


// put request
app.put('/articles/:articleTitle', function(req, res) { 
    Article.replaceOne(                  // If you use `overwrite: true`, you should use `replaceOne()` instead:
        {title: req.params.articleTitle},
        {title: req.body.title, 
       content: req.body.content},
        {overwrite: true},
        function(err) {
            if (!err) {
                res.send('Successfully updated article');
            } else {
                console.log(err);
            };
        });
});


// patch request    // in POSTMAN we can choose now, which part what we want to update
app.patch('/articles/:articleTitle', function(req, res) { 
    Article.updateMany(                 
        {title: req.params.articleTitle},
        {$set: req.body},
        function(err) {
            if (!err) {
                res.send('Successfully patched part of the article');
            } else {
                console.log(err);
            };
        });
});


// delete request    // in POSTMAN we can choose now which article we want to delete
app.delete('/articles/:articleTitle', function(req, res) { 
    Article.deleteOne(                 
        {title: req.params.articleTitle},
        function(err) {
            if (!err) {
                res.send('Successfully delete part of article');
            } else {
                console.log(err);
            };
        });
});


