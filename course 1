NODE.JS                                                                                                                                     START 20.10.22

-Express is a Framework for Node.js
-is an Backend Framework
-for Server Side Applications
-is an API
-allows to run javascript on a server
-package.json => file includes all the packages which have installed in node

1. Datei speichern                                                                           SAVE
2. Server starten (zb. im Terminal mit den Befehl -> node app.js                             EXECUTE
3. (Web-)Seite Starten     zb. mit google chrome -> dort in die URL -> localhost:3000/test   RUN

require KEYWORD -> to import files 
                -> or npm packages


  
              VSCode SETUP
______________________________________________

1. (run in terminal) npm init -> to get the package.json (file) => file includes all the packages which have installed in node

2. npm install --save express 

3. npm install nodemon --save-dev

adding at the package json file to -> "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon app.js"                                  // this line that the app will execute automaticly -> after nodemon installation
              


4. If we want use ROUTES
   npm install --save body-parser    // we just need a body parser if our website should handle http POST request data
                                     // for parsing incoming request bodys


optional                 npm install --save mongodb




             CREATING A NEW SERVER
______________________________________________

adding a file -> app.js => its the route file to start a server with node.js



const http = require('http');

const server = http.createServer((req, res) => {       // create server callback function
    console.log(req);
});

server.listen(3000);                                   // looping process (Event Loop)  -> keep on listening for requests

// *** THATS ALL WE NEED TO CREATE A NEW SERVER ***




               IMAGES / FOLDER IMPORT
______________________________________________

Examples:


appExpress.use(express.static(path.join(__dirname, 'public'))); // makes it like if we are already in this folder
appExpress.use(express.static(path.join(__dirname, 'views'))); // makes it like if we are already in this folder
appExpress.use(express.static(path.join(__dirname, 'images'))); // makes it like if we are already in this folder





                VARIABLES
____________________________________________

Ways to declare a Variable:

let     can be reassigned in the future
const   can not be reassigned, Is a Constant



                MODULES
____________________________________________

A Package is also called as a MODULE
localhost:  makes my own ip adress behave like a remote web server


('/')  Thats the Starting Page (the root)
... JavaScript object spread operator                                   https://www.javascripttutorial.net/es-next/javascript-object-spread/

if (url === '/');    die drei = bedeuten: if ist nur true, wenn die url is an string und den Wert hat.


Events, Event Loop:




              FUNCTIONS
____________________________________________

Callback Function: Will be called when 'exit' in this case is done. 


EXAMPLE: process.on('exit', function() {
                                 ↑
})                            CALLBACK





              REQUESTS
____________________________________________

https://www.twilio.com/blog/2017/08/http-requests-in-node-js.html
      
      
  const https = require('https');
    

req       means request  (Client)Frontend is sending a request to the (Server)Backend

- requests will be included in html and css and ... (Frontend)files

EXAMPLE....


Type: (of requests)     http verbs

use       for handle any method
get       get request to a certain url                                  get a resource from the server
post      intend is to modify(change) data  or  create something        post a resource to the server
patch     intend is to modify(change) data                              update parts off an existing resource on the server
put
delete    delete a resource on the server


      271
get 
post


SUBMIT BUTTON -> is trigering a POST request




              ASYNC Requests OPTIONAL -> then and catch is doing the same
____________________________________________

normal requests do redirect or create? a new html page

async does it behind the scenes just in the backend! (for deleting an item for example)

works with JSON data (mostly)



async in front of a function

let test = async (req, res) => {
const example = await ....;
};



"Top Level await"

could also be used outside of a function



                RESPONSES
__________________________________________

res       means response  (Server)Backend (is now saving the data to a Database ) and after, is sending a response to the (Client)Frontend

          Its called a Request-Response Cycle
          
- In the Backend(files) we define what types of requests are allowed- and how we handle these requests

app.post(‘/orders‘, (req, res) => {                      link: youtube -> supersimpledev Video: backend web development
  const order = createOrder(req);
  database.save(order);
  res.send('Order confirmed.');
});

app.get(‘/orders‘, (req, res) => {
  const orders = database.getOrderHistory();
  res.json(orders);
});

app.delete('/orders', (req, res) => {
  database.cancelOrder(req);
  res.json('Order canceled.');
});

          
export    allows that a MODUL can be used in another file
exports
import    allows a file to consume a MODUL (which is exported)





                  ROUTING ------ HOW TO CONNECT HTML File with another File     lecture 234 // or 70 max
____________________________________________

app.js:


app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});



  

                  with ROUTES FOLDER:

app.js file:                    we use PATH now when we are routing


const path = require('path');   ****** WITH THIS LINE



app.get('/', function(req, res) {
  res.sendFile('index.html');                                                 RELATIVE PATH   (This will only look in the current directory/folder)


app.get('/index', function(req, res) {
  res.sendFile(path.join(__dirname, '../', 'views', 'index.html'))});         This will give us the file whereever it is / __dirname means directory name        
  
  
  
route file:

const router = express.Router();            // for  the export to app.js file

router.use('/', (req, res, next) => {   // we have to use the name router in the front
    res.sendFile(path.join(__dirname, '../', 'views', 'page.html'));  **** WITH THIS LINE AS WELL // !!! sendFile !!! to connect with the html file
});

module.exports = router;                    // for  the export to app.js file


________________________

     Routing ejs files !?!?
     
     Static Side:
     
app.get('/', function(req, res) {
    res.render('home.ejs');                 // also worked without .ejs 
});


    With Dynamic Content:
    
app.get('/', function(req, res) {
    res.render('home.ejs', {startingContent: homeStartingContent}); 
});                               ↑                   ↑ 
                                 Key                Value
                         (name in ejs file)    (name in app.js file)
                         
_______________________

How to use more than one export from one file:    // Lektion 272


module.exports.getDate = getDate;

function getDate() {
}

......

module.exports.getDay = getDay;

function getDay() {
}

and than requirering the FILE in the app.js file ->

const date = require(__dirname + '/date.js');     





                    DOM
____________________________________________

html file:
<script src="script.js"></script>   <!-- this has to be at the end of the file, because the body tags have to be readed first -->
 

app.js:

// querySelector looks inside the whole document for a single item (element, class or id), h1 in this case
document.querySelector('h1').innerHTML = 'Good bye'; // works

// getElementsByClassName goes throw the whole document and looks for the elementS with a particular class
document.getElementsByClassName('item')[0].innerHTML = 'good';  // its Elements so an array!

// const container = document.getElementById('container');
document.getElementById('container').innerHTML = 'Tschau';

// getElementsByTagName goes throw the whole document and looks for the elementS with a particular tag
document.getElementsByTagName('li')[1].innerHTML = 'ok';    // its Elements so an array!





                  STATUSCODES
____________________________________________

200 Success
4** Client Error
5** Server Error



NPM (Package Manager)
3rd Party Packages sind "Dependencies" -> findet man unter  npm Repository
Zum installieren ->
Befehl: npm install name


// 404 
appExpress.use((req, res, next) => {
    res.status(404).sendFile(path.join(__dirname, 'views', '404.html'));
});




                TYPES OF ERRORS
____________________________________________

Syntax Errors = Typos
Runtime Erros / hat wohl nich nanderen Namen
Logical Errors            (werden nicht angezeigt) ---> findet man ggf. mit dem "debugger"

CORS Error (Lektion 366) -> solving only on our?? server





      FOR   DYNAMIC   OR REALTIME CONTENT / FEATURES IN THE FRONTEND ---> we use --->  TEMPLATING ENGINES
____________________________________________

      or View Engine. Thats why we need in this case when we are using EJS for example, we need a Views folder!


for example:
PUG
Handlebars

EJS
- IMPORTANT ejs does not support layouts. -> but theres is a solution for

                   1. npm install ejs
                    
                   2. ADD to app.js file!:    
                   
                   app.set('view engine', 'ejs');     (set -> no err)
                   app.use('view engine', 'ejs');     (what is use doing instead of set?)




syntax: <% %>     with this we can use javascripot in a html file. EVERY line which is NOT html, must be embedded with <% .... %> 

        <%= %>    to import dynamic values into a html file   <h1> <%= value %> </h1>
        <%- %>
        
inline if statement in javascript  with ?
inline else statement in javascript with :

example:  <a class="<%= path === 'admin/add-product' ? 'active' : '' %>" href="/">Shop</a>


how to use? -> with  render  method
res.render....



header and footer for all sites:

making seperate header and footer .ejs files

add these lines

<%- include('header.ejs') -%>
<%- include('footer.ejs') -%>



DYNAMIC CONTENT

<% posts.forEach(function(post) { %>        <!-- this is doing the same like a for loop -->
<%     console.log(post.content); %>

<!-- MAGIC LINE to include it into the website  LEKTION 304 -->
<p> <%= post.content %> </p>            
<% }); %>




                MVC   / DESIGN PATTERN  kind of Important
____________________________________________

-Model View Controller-


               Routes
                 |
Models Views Controllers

= Seperation of Concerns






               APIs  (Webserver) Application Programming Interface
____________________________________________      

REST      |       GraphQL..

Types of Requests that the Backend allows -> calls API
.




      SENDING E-MAIL <how to>
____________________________________________

we have to use a third party service (Mail Service)
- like https://api.sender.net/

- npm install --save nodemailer
- npm install --save nodemailer nodemailer-sendgrid-transport





            COOKIES     HOW TO SETUP COOKIES
____________________________________________

  res.setHeader('Set-Cookie', 'loggedIn=true');
  
  
  

  
           SESSIONS        npm install --save express-session
____________________________________________

- is only for one user
- Cookies are on the client side
- Sessions are on the SERVER SIDE

How to use sessions with mongodb        npm install --save connect-mongodb-session




            PASSWORD ENCRYPTION
____________________________________________

npm install bcryt

const bcrypt = require('bcrypt');
const saltRounds = 12;              // 12 rounds is enough these days


To hash a password:

bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {
    // Store hash in your password DB.
});


To check a password:

// Load hash from your password DB.
bcrypt.compare(myPlaintextPassword, hash, function(err, result) {
    // result == true
});




            CSRF PROTECTION
____________________________________________

- npm install --save csurf

- -> now we can use a CSRF Token (a string value)

- npm install --save connect-flash
The flash is a special area of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user. 





            WEBSOCKETS      FAB -> https://socket.io/docs/v4/client-installation/
                            perfect guide -> https://socket.io/get-started/chat 
____________________________________________

- we PUSH data from the server to -> the client
- socket.IO is recommended

npm install --save socket.io
npm install --save socket.io-client


// working code
const express = require('express');
const app = express();
const server = require('http').createServer(app);
const io = require('socket.io')(server, { cors: { origin: "*" }});

server.listen(3000);
console.log('server is running');

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});





               LODASH          https://lodash.com
____________________________________________

npm i --save lodash

const _ = require('lodash');





                 OAUTH
____________________________________________

https://www.passportjs.org/packages/passport-google-oauth20/


npm install passport-google-oauth20

npm install mongoose-findorcreate

3. npm install passport






                  dotenv  .ENV
____________________________________________

- for NOT showing sensitive/privat data like API or encryption keys

npm install dotenv --save

require('dotenv').config()
console.log(process.env) // remove this after you've confirmed it is working



.env file has to be in the root folder!
naming has to be .env !


Syntax Rules:

NAME=VALUE
SECRET=ThisIsOurSecret
API_KEY=jdiuwjwnduidnwoqidnqidno



