NODE.JS                                                                                                                                     START 20.10.22

-is an Backend Framework
-for Server Side Applications
-is an API
-allows to run javascript on a server
-package.json => file includes all the packages which have installed in node

1. Datei speichern                                                                           SAVE
2. Server starten (zb. im Terminal mit den Befehl -> node app.js                             EXECUTE
3. (Web-)Seite Starten     zb. mit google chrome -> dort in die URL -> localhost:3000/test   RUN

require KEYWORD -> to import files

______________________________________________
CREATING A NEW SERVER

adding a file -> app.js => its the route file to start a server with node.js




const http = require('http');

const server = http.createServer((req, res) => {       // create server callback function
    console.log(req);
});

server.listen(3000);                                   // looping process (Event Loop)  -> keep on listening for requests

// *** THATS ALL WE NEED TO CREATE A NEW SERVER ***

______________________________________________

1. (run in terminal) npm init -> to get the package.json (file) => file includes all the packages which have installed in node

adding at the package json file to -> "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon app.js"                                  // this line that the app will execute automaticly -> after nodemon installation

2. npm install nodemon --save-dev

3. npm install --save express               

optional                 npm install --save mongodb

optional BODY PARSER     npm install --save body-parser    // we just need a body parser if our website should handle http POST request data

______________________________

Ways to declare a Variable
let     can be reassigned in the future
const   can not be reassigned, Is a Constant


A Package is also called as a MODULE
localhost     makes my own ip adress behave like a remote web server


('/')  Thats the Starting Page
... JavaScript object spread operator                        https://www.javascripttutorial.net/es-next/javascript-object-spread/
if (url === '/');    die drei = bedeuten: if ist nur true, wenn die url ein string ist und den Wert hat.


Events, Event Loop:

Callback Function:


EXAMPLE: process.on('exit', function() {
                                 ↑
})                            CALLBACK


req       means request  (Client)Frontend is sending a request to the (Server)Backend

- requests will be included in html and css and ... (Frontend)files

EXAMPLE....

Type: (of requests)
get       get request to a certain url                                  get a resource from the server
post      intend is to modify(change) data  or  create something        post a resource to the server
patch     intend is to modify(change) data                              update parts off an existing resource on the server
put
delete    delete a resource on the server

__________________________________________


res       means response  (Server)Backend (is now saving the data to a Database ) and after, is sending a response to the (Client)Frontend

          Its called a Request-Response Cycle
          
- In the Backend(files) we define what types of requests are allowed- and how we handle these requests

app.post(‘/orders‘, (req, res) => {                        // was bedeutet app. ???    link: youtube -> supersimpledev Video: backend web development
  const order = createOrder(req);
  database.save(order);
  res.send('Order confirmed.');
});

app.get(‘/orders‘, (req, res) => {
  const orders = database.getOrderHistory();
  res.json(orders);
});

app.delete('/orders', (req, res) => {
  database.cancelOrder(req);
  res.json('Order canceled.');
});

          
export    allows that a MODUL can be used in another file
exports
import    allows a file to consume a MODUL (which is exported)

HOW TO CONNECT HTML File with another File

const path = require('path');   ****** WITH THIS LINE
const express = require('express');         // for  the export to app.js file

const router = express.Router();            // for  the export to app.js file

router.use('/', (req, res, next) => {   // we have to use the name router in the front
    res.sendFile(path.join(__dirname, '../', 'views', 'page.html'));  **** WITH THIS LINE AS WELL // !!! sendFile !!! to connect with the html file
});

module.exports = router;                    // for  the export to app.js file



STATUSCODES

200 Success
4** Client Error
5** Server Error


to send a request we can use -> get



NPM (Package Manager)
3rd Party Packages sind "Dependencies" -> findet man unter  npm Repository
Zum installieren ->
Befehl: npm install name


TYPES OF ERRORS
Syntax Errors = Typos
Runtime Erros / hat wohl nich nanderen Namen
Logical Errors            (werden nicht angezeigt) ---> findet man ggf. mit dem "debugger"

  
      EXPRESS.JS
Ist eines von vielen Frameworks

parser installieren:   npm install --save body-parser



TEMPLATING ENGINES

how to use? -> with  render  method

for example:
PUG
Handlebars
ejs         !IMPORTANT ejs does not support layouts. -> but theres is a solution for


ejs
syntax: <% %>

        <%= %>
        <%- %>
        
inline if statement in javascript  with ?
inline else statement in javascript with :

example:  <a class="<%= path === 'admin/add-product' ? 'active' : '' %>" href="/">Shop</a>




MVC
-Model View Controller-


               Routes
                 |
Models Views Controllers

= Seperation of Concerns




APIs  (Webserver) Application Programming Interface

REST      |       GraphQL..

Types of Requests that the Backend allows -> calls API
.

____________________________________________

SENDING E-MAIL <how to>

we have to use a third party service (Mail Service)
- npm install --save nodemailer


COOKIES
HOW TO SETUP COOKIES

  res.setHeader('Set-Cookie', 'loggedIn=true');
  
  
SESSIONS        npm install --save express-session

- is only for one user
- Cookies are on the client side
- Sessions are on the SERVER SIDE

How to use sessions with mongodb        npm install --save connect-mongodb-session


PASSWORD ENCRYPTION

- npm install bcryt


CSRF PROTECTION

- npm install --save csurf

- -> now we can use a CSRF Token (a string value)

- npm install --save connect-flash
The flash is a special area of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user. 
